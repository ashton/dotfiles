set encoding=UTF-8
syntax enable
if (has("termguicolors"))
 set termguicolors
endif

set guifont=JetBrainsMono\ Nerd\ Font:h14

set nocompatible
set tabstop=2       " number of visual spaces per TAB
set softtabstop=2   " number of spaces in tab when editing
set shiftwidth=2
set expandtab       " tabs into spaces
set smarttab

set number          " show line numbers
set relativenumber  " show numbers relative to the current line
set cursorline      " show a horizontal line on the cursor line
set showmatch       " highlight matching [{()}]

set laststatus=2    " show lightline
set showtabline=2   " lightline buffers
set noshowmode      " hide mode from statusline

filetype indent on  " load filetype specific indent files
set wildmenu        " visual autocomplete for command menu

set lazyredraw      " redraw screen only when needed
set updatetime=300  " better timing for coc.nvim diagnostics
set timeoutlen=500  " time for keybidings menu

" more natural split order
set splitbelow
set splitright

set cmdheight=2     " better display for messages
set shortmess+=c    " don't give |ins-completion-menu| messages.

set incsearch       " search as you type
set hlsearch        " highlight matches
set ignorecase
set smartcase

set directory=/tmp
set nobackup
set nowritebackup

set wildignore+=**/node_modules/**,**/deps/** " please don't search in node_modules black hole
set hidden  " allows to change buffer without saving it

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

let mapleader="\<Space>"   " map <leader> to spacebar

" turn off search highlight
nnoremap <silent> <leader>hc :nohlsearch <CR>

" buffer keymapping
nnoremap ]b :bnext<CR>
nnoremap [b :bprevious<CR>
nnoremap <leader>bD :bd<CR>
nnoremap <leader>bd :BD<CR>
nnoremap <leader>bb :CocList buffers<CR>

" nerdtree keymap
nnoremap \ :NERDTreeToggle<CR>
nnoremap <leader>op :NERDTreeToggle<CR>
nnoremap <M-\> :NERDTreeFind<CR>
nnoremap <leader>oP :NERDTreeFind<CR>

let NERDTreeMapOpenSplit='s'
let NERDTreeMapOpenVSplit='v'
let NERDTreeMapCloseDir='c'
let NERDTreeMapCloseChildren='C'
let NERDTreeMapChangeRoot='Z'

let s:light_blue = "A7D8D8"
let g:NERDTreeExtensionHighlightColor = {} " this line is needed to avoid error
let g:NERDTreeExtensionHighlightColor['elm'] = s:light_blue " sets the color of css files to ligt_blue

  " FZF keymapping
  nnoremap <leader><leader> :Files<CR>
  nnoremap <leader>sp :Ag 
  nnoremap <leader>hw :call fzf#vim#grep(expand('<cword>'))<CR>

  " split mappings
  nnoremap <leader>wj <C-W><C-J>
  nnoremap <leader>wk <C-W><C-K>
  nnoremap <leader>wl <C-W><C-L>
  nnoremap <leader>wh <C-W><C-H>
  nnoremap <leader>wd <C-W>q

  " resize panes
   nnoremap <silent> <S-Right> :vertical resize +5<cr>
   nnoremap <silent> <S-Left> :vertical resize -5<cr>
   nnoremap <silent> <S-Up> :resize +5<cr>
   nnoremap <silent> <S-Down> :resize -5<cr>

  " test mappings
  nnoremap <silent> <leader>tf :TestFile<CR>
  nnoremap <silent> <leader>tn :TestNearest<CR>
  nnoremap <silent> <leader>ts :TestSuite<CR>
  nnoremap <silent> <leader>tl :TestLast<CR>

  " Prettier
  nmap <Leader>cfb <Plug>(Prettier)

  " Coc Mappings for completion

  " Use tab for trigger completion with characters ahead and navigate.
  " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction

  " Remap for rename current word
  nmap <leader>cr <Plug>(coc-rename)
  nmap <leader>cR <Plug>(coc-refactor)

  " Quickfix for current line
  nmap <leader>cq <Plug>(coc-fix-current) 

  " code mappings
  nmap <silent> <leader>cgd <Plug>(coc-definition)
  nmap <silent> <leader>cgt <Plug>(coc-type-definition)
  nmap <silent> <leader>cgi <Plug>(coc-implementation)
  nmap <silent> <leader>cgr <Plug>(coc-references)
  nmap <leader>ca <Plug>(coc-codeaction)
  nnoremap <silent> <leader>cx :CocList diagnostics<CR>
  nnoremap <silent> <leader>cl :CocList outline<CR>
  nnoremap <silent> <leader>ck :call <SID>show_documentation()<CR>
  

  " Create mappings for function text object, requires document symbols feature of languageserver.
  xmap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap if <Plug>(coc-funcobj-i)
  omap af <Plug>(coc-funcobj-a)

  " jump to the previous function
  nnoremap <silent> [f :call
\ search('\(\(if\\|for\\|while\\|switch\\|catch\)\_s*\)\@64<!(\_[^)]*)\_[^;{}()]*\zs{', "bw")<CR>
" jump to the next function
  nnoremap <silent> ]f :call
\ search('\(\(if\\|for\\|while\\|switch\\|catch\)\_s*\)\@64<!(\_[^)]*)\_[^;{}()]*\zs{', "w")<CR>

  " Navigate through diagnostics
  nmap <silent> [l <Plug>(coc-diagnostic-prev)
  nmap <silent> ]l <Plug>(coc-diagnostic-next)

  " Use <c-space> to trigger completion.
  if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
  else
    inoremap <silent><expr> <c-@> coc#refresh()
  endif

  " Remap <C-f> and <C-b> for scroll float windows/popups.
  if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  endif

  " Make <CR> auto-select the first completion item and notify coc.nvim to
  " format on enter, <cr> could be remapped by other vim plugin
  inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

  " FZF configuration
  " configuring fzf :Files command to start in vim's current directory
  function! s:find_git_root()
    return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
  endfunction

  command! ProjectFiles execute 'Files' s:find_git_root()


  " shortcuts
  let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-s': 'split',
    \ 'ctrl-v': 'vsplit' }
  let $FZF_DEFAULT_COMMAND = 'ag -p ~/.ignore -g ""'

  " snippets configuration
  let g:UltiSnipsExpandTrigger='<Nop>'
  let g:UltiSnipsJumpForwardTrigger = '<TAB>'
  let g:UltiSnipsJumpBackwardTrigger = '<S-TAB>'
  let g:coc_snippet_next = '<TAB>'
  let g:coc_snippet_prev = '<S-TAB>'
  let g:coc_node_path = '~/.asdf-data/shims/node'

  let g:coc_status_error_sign = '✖ '
  let g:coc_status_warning_sign = '⚠  '

  " coc extensions
  let g:coc_global_extensions = [
  \ 'coc-snippets',
  \ 'coc-tsserver',
  \ 'coc-highlight',
  \ 'coc-eslint',
  \ 'coc-prettier',
  \ 'coc-elixir',
  \ 'coc-lists'
  \ ]

  let g:rainbow_conf = {
\   'separately': {
\       '*': 0,
\       'clojure': {}
\   }
\}


  " elm plugin config
  let g:elm_setup_keybindings = 0     " removing bindings conflicts from elm-vim
  let g:elm_format_autosave = 1

  " jsx plugin config
  let g:jsx_ext_required = 0

  " vim closetag config
  let g:closetag_filetypes = 'html,xhtml,phtml,javascript.jsx'
  let g:closetag_xhtml_filetypes = 'xhtml,jsx,javascript.jsx'
  let g:closetag_emptyTags_caseSensitive = 1
  let g:closetag_shortcut = '>'
  let g:closetag_close_shortcut = '<leader>>'

" NERDTree config
let NERDTreeQuitOnOpen=1
let NERDTreeIgnore = ['\.pyc$', 'node_modules', 'build', 'dist', '.git/', 'tags', 'target', '\.bs\.js']
if exists('g:loaded_webdevicons')
  call webdevicons#refresh()
endif

" Testing config
let test#strategy = "neomake"
let g:test#javascript#jest#options = '--reporters jest-vim-reporter'
let g:neomake_open_list = 0

" Rainbow config
let g:rainbow_active = 1

" fzf config
let g:fzf_tags_command = 'ctags -R'
let g:fzf_buffers_jump = 1
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

  " Lightline configuration
  function! CocErrors()
    let info = get(b:, 'coc_diagnostic_info', {})
    let errors = get(info, 'error', 0)
    let error_sign = get(g:, 'coc_status_error_sign', 'E:')

    return (errors > 0 ? error_sign . info['error'] : '')
  endfunction
  

  function! CocWarnings()
    let info = get(b:, 'coc_diagnostic_info', {})
    let warnings = get(info, 'warning', 0)
    let warning_sign = get(g:, 'coc_status_warning_sign', 'W:')

    return (warnings > 0 ? warning_sign . info['warning'] : '')
  endfunction

  function! CocCurrentFunction()
    return get(b:, 'coc_current_function', '')
  endfunction

  function! DevIconsFileType()
    return WebDevIconsGetFileTypeSymbol()
  endfunction

  function! DevIconsFileFormat()
    return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
  endfunction

  function! LightlineFilename()
    let filename = expand('%:p:.') !=# '' ? expand('%:p:.') : '[No Name]'
    let modified = &modified ? ' +' : ''
    return DevIconsFileType() . ' ' . filename . modified
  endfunction

  function! BranchName()
    return FugitiveHead() . ' ' 
  endfunction

  let g:lightline = {
  \ 'colorscheme': 'oceanicnext',
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '', 'right': '' },
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch', 'currentfunction', 'filename' ] ],
  \   'right': [ [ 'coc_errors', 'coc_warnings', 'lineinfo' ],
  \              [ 'percent' ],
  \              [  'fileformat', 'fileencoding' ] ]
  \ },
  \ 'tabline': {
  \   'left': [ ['buffers'] ],
  \   'right': [ ['close'] ]
  \ },
  \ 'component': {
  \   'lineinfo': ' %3l:%-2v',
  \ },
  \ 'component_expand': {
  \   'coc_errors': 'CocErrors',
  \   'coc_warnings': 'CocWarnings',
  \   'buffers': 'lightline#bufferline#buffers'
  \ },
  \ 'component_type': {
  \   'buffers': 'tabsel',
  \   'coc_errors': 'error',
  \   'coc_warnings': 'warning'
  \ },
  \ 'component_raw': {
  \   'buffers': 1
  \ },
  \ 'component_function': {
  \   'gitbranch': 'BranchName',
  \   'currentfunction': 'CocCurrentFunction',
  \   'filetype': 'DevIconsFileType',
  \   'fileformat': 'DevIconsFileFormat',
  \   'filename': 'LightlineFilename',
  \ },
\ }

" Bufferline config
" show full path and file name
let g:lightline#bufferline#filename_modifier = ':t'
" cool numbers for ordinal buffer show
let g:lightline#bufferline#composed_number_map = {
\ 1:  '⑴ ', 2:  '⑵ ', 3:  '⑶ ', 4:  '⑷ ', 5:  '⑸ ',
\ 6:  '⑹ ', 7:  '⑺ ', 8:  '⑻ ', 9:  '⑼ ', 10: '⑽ ',
\ 11: '⑾ ', 12: '⑿ ', 13: '⒀ ', 14: '⒁ ', 15: '⒂ ',
\ 16: '⒃ ', 17: '⒄ ', 18: '⒅ ', 19: '⒆ ', 20: '⒇ '}
" show buffers ordinal number
let g:lightline#bufferline#show_number = 2
" show unicode symbols of modified, readonly and more
let g:lightline#bufferline#unicode_symbols = 1
" devicons
let g:lightline#bufferline#enable_devicons = 1
" clickable tablines
let g:lightline#bufferline#clickable = 1

" updates lightline when coc diagnostics change
autocmd User CocDiagnosticChange call lightline#update()

" buffer jump mappings
nmap <Leader>b1 <Plug>lightline#bufferline#go(1)
nmap <Leader>b2 <Plug>lightline#bufferline#go(2)
nmap <Leader>b3 <Plug>lightline#bufferline#go(3)
nmap <Leader>b4 <Plug>lightline#bufferline#go(4)
nmap <Leader>b5 <Plug>lightline#bufferline#go(5)
nmap <Leader>b6 <Plug>lightline#bufferline#go(6)
nmap <Leader>b7 <Plug>lightline#bufferline#go(7)
nmap <Leader>b8 <Plug>lightline#bufferline#go(8)
nmap <Leader>b9 <Plug>lightline#bufferline#go(9)


call plug#begin('~/vim/plugged')
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-commentary'
  Plug 'jiangmiao/auto-pairs'
  Plug 'tpope/vim-fugitive'
  Plug 'alvan/vim-closetag'
  Plug 'scrooloose/nerdtree'
  Plug 'itchyny/lightline.vim'
  Plug 'mengelbrecht/lightline-bufferline'
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'
  Plug 'janko-m/vim-test'
  Plug 'SirVer/ultisnips'
  Plug 'honza/vim-snippets'
  Plug 'metakirby5/codi.vim'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'prettier/vim-prettier'
  Plug 'ryanoasis/vim-devicons'
  Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
  Plug 'luochen1990/rainbow'
  Plug 'qpkorr/vim-bufkill'
  Plug 'neomake/neomake'
  Plug 'tpope/vim-dispatch'
  Plug 'liuchengxu/vim-which-key'

  " Language plugins
  Plug 'sheerun/vim-polyglot'
  Plug 'joaohkfaria/vim-jest-snippets'
  Plug 'rescript-lang/vim-rescript'

  " Themes
   Plug 'arcticicestudio/nord-vim'
   Plug 'ashton/oceanic-next'
call plug#end()

colorscheme OceanicNext

" menu for key mappings
call which_key#register('<Space>', "g:which_key_map")

nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>
vnoremap <silent> <leader> :<c-u>WhichKeyVisual '<Space>'<CR>

let g:which_key_map =  {}
" window key mappings
let g:which_key_map.w = { 'name' : '+window' }
let g:which_key_map.w.d = 'close-window'
let g:which_key_map.w.j = 'move-to-window-below'
let g:which_key_map.w.k = 'move-to-window-above'
let g:which_key_map.w.l = 'move-to-left-window'
let g:which_key_map.w.h = 'move-to-right-window'

" buffer key mappings
let g:which_key_map.b = { 'name': '+buffer' }
let g:which_key_map.b.1 = 'go-to-buffer-1'
let g:which_key_map.b.2 = 'go-to-buffer-2'
let g:which_key_map.b.3 = 'go-to-buffer-3'
let g:which_key_map.b.4 = 'go-to-buffer-4'
let g:which_key_map.b.5 = 'go-to-buffer-5'
let g:which_key_map.b.6 = 'go-to-buffer-6'
let g:which_key_map.b.7 = 'go-to-buffer-7'
let g:which_key_map.b.8 = 'go-to-buffer-8'
let g:which_key_map.b.9 = 'go-to-buffer-9'
let g:which_key_map.b.a = 'alternate-MRU-buffers'
let g:which_key_map.b.b = 'list-all-buffers'
let g:which_key_map.b.b = 'list-all-buffers'
let g:which_key_map.b.D = 'kill-buffer-and-split'
let g:which_key_map.b.d = 'kill-buffer-keep-split'
let g:which_key_map.b.f = 'kill-and-go-to-next'
let g:which_key_map.b.w = 'kill-and-go-to-prev'

" code key mappings
let g:which_key_map.c = { 'name': '+code' }
let g:which_key_map.c.a = 'view-code-actions'
let g:which_key_map.c.l = 'list-buffer-symbols'
let g:which_key_map.c.q = 'run-quick-fix'
let g:which_key_map.c.R = 'coc-refactor-var'
let g:which_key_map.c.r = 'rename-var'
let g:which_key_map.c.x = 'list-diagnostics'
let g:which_key_map.c.k = 'show-documentation'

let g:which_key_map.c.f = { 'name': '+format' }
let g:which_key_map.c.f.b = 'prettier-format-current-buffer'

let g:which_key_map.c.g = { 'name': '+go-to' }
let g:which_key_map.c.g.d = 'go-to-definition'
let g:which_key_map.c.g.i = 'go-to-implementation'
let g:which_key_map.c.g.r = 'list-references'
let g:which_key_map.c.g.t = 'go-to-type-definition'

" highlight key mappings
let g:which_key_map.h = { 'name': '+highlight' }
let g:which_key_map.h.c = 'clear-highlight'
let g:which_key_map.h.w = 'higlight-current-word'

" open key mappings
let g:which_key_map.o = { 'name': '+open' }
let g:which_key_map.o.p = 'open-NERDTree'
let g:which_key_map.o.P = 'find-in-NERDTree'

" search key mappings
let g:which_key_map.s = { 'name': '+search' }
let g:which_key_map.s.p = 'search-in-project'

" test key mappings
let g:which_key_map.t = { 'name': '+test' }
let g:which_key_map.t.f = 'test-file'
let g:which_key_map.t.l = 'repeat-last-test'
let g:which_key_map.t.n = 'test-nearest'
let g:which_key_map.t.s = 'test-suite'

" ignored mappings
let g:which_key_map['!'] = { 'name': 'which_key_ignore' }

